From 165f12d1b6b8071acb4e8c743d33b4ccad582e69 Mon Sep 17 00:00:00 2001
From: Niels de Vos <ndevos@redhat.com>
Date: Tue, 9 Dec 2014 21:05:51 +0100
Subject: [PATCH 29/35] add fuse_fscache_reset_inode_cookie()

---
 fs/fuse/file.c    |  1 +
 fs/fuse/fscache.c | 20 ++++++++++++++++++++
 fs/fuse/fscache.h |  2 ++
 fs/fuse/inode.c   |  5 ++++-
 4 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/fs/fuse/file.c b/fs/fuse/file.c
index 6707425..c49265f 100644
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -2150,6 +2150,7 @@ static int fuse_direct_mmap(struct file *file, struct vm_area_struct *vma)
 		return -ENODEV;
 
 	invalidate_inode_pages2(file->f_mapping);
+	fuse_fscache_reset_inode_cookie(file->f_inode);
 
 	return generic_file_mmap(file, vma);
 }
diff --git a/fs/fuse/fscache.c b/fs/fuse/fscache.c
index 3ed033d..0f2bc0d 100644
--- a/fs/fuse/fscache.c
+++ b/fs/fuse/fscache.c
@@ -406,6 +406,26 @@ void fuse_fscache_set_inode_cookie(struct inode *inode, struct file *filp)
                 fuse_fscache_enable_inode_cookie(inode);
 }
 
+
+void fuse_fscache_reset_inode_cookie(struct inode *inode)
+{
+	struct fuse_inode *fi = get_fuse_inode(inode);
+	struct fuse_conn *fc = get_fuse_conn(inode);
+	struct fscache_cookie *old = fi->fscache;
+
+	if (fi->fscache) {
+		/* retire the current fscache cache and get a new one */
+		fscache_relinquish_cookie(fi->fscache, 1);
+
+		fi->fscache = fscache_acquire_cookie(
+					fc->fscache.mnt,
+					&fuse_fh_cache_index_def,
+					fi, true);
+		printk(KERN_WARNING "%s: new cookie 0x%p oldcookie 0x%p\n",
+		       __func__, fi->fscache, old);
+	}
+}
+
 /*********************************/
 /* Register/Unregister the netfs */
 /*********************************/
diff --git a/fs/fuse/fscache.h b/fs/fuse/fscache.h
index 369f83e..fdcb0e7 100644
--- a/fs/fuse/fscache.h
+++ b/fs/fuse/fscache.h
@@ -36,6 +36,8 @@ extern int __fuse_readpages_from_fscache(struct inode *inode, struct
 					 struct list_head *pages,
 					 unsigned *nr_pages);
 
+extern void fuse_fscache_reset_inode_cookie(struct inode *inode);
+
 static inline int fuse_readpages_from_fscache(struct inode *inode,
 					      struct address_space *mapping,
 					      struct list_head *pages,
diff --git a/fs/fuse/inode.c b/fs/fuse/inode.c
index f672b56..bc04be9 100644
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@ -247,8 +247,10 @@ void fuse_change_attributes(struct inode *inode, struct fuse_attr *attr,
 				inval = true;
 		}
 
-		if (inval)
+		if (inval) {
 			invalidate_inode_pages2(inode->i_mapping);
+			fuse_fscache_reset_inode_cookie(inode);
+		}
 	}
 }
 
@@ -349,6 +351,7 @@ int fuse_reverse_inval_inode(struct super_block *sb, u64 nodeid,
 			pg_end = (offset + len - 1) >> PAGE_CACHE_SHIFT;
 		invalidate_inode_pages2_range(inode->i_mapping,
 					      pg_start, pg_end);
+		fuse_fscache_reset_inode_cookie(inode);
 	}
 	iput(inode);
 	return 0;
-- 
1.9.3

